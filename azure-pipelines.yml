trigger:
- master

pr:
- master

stages:
- stage: Build
  jobs:
  - job: 'PythonLint'
    displayName: "Python Lint"
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'puremourning/vimspector:test'
    steps:
     - bash: pip3 install -r dev_requirements.txt
       displayName: "Install requirements"

     - bash: '$HOME/.local/bin/flake8 python3/ *.py'
       displayName: "Run flake8"

  - job: 'Vimscript'
    displayName: "Vimscript Lint"
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'puremourning/vimspector:test'
    steps:
     - bash: pip3 install -r dev_requirements.txt
       displayName: "Install requirements"

     - bash: $HOME/.local/bin/vint autoload/ compiler/ plugin/ tests/ syntax/
       displayName: "Run vint"

  - job: 'linux'
    pool:
      vmImage: 'ubuntu-16.04'
    container:
      image: 'puremourning/vimspector:test'
      options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined
    steps:
    - bash: |
        eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
        go get -u github.com/go-delve/delve/cmd/dlv
      displayName: 'Install Delve for Go'

    - task: CacheBeta@0
      inputs:
        key: v2 | gadgets | $(Agent.OS) | python3/vimspector/gadgets.py
        path: gadgets/linux/download
      displayName: Cache gadgets

    - bash: vim --version
      displayName: 'Print vim version information'

    - bash: |
        eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
        export GOPATH=$HOME/go
        ./run_tests --install --update --report messages --quiet
      displayName: 'Run the tests'
      env:
        VIMSPECTOR_MIMODE: gdb

    - bash: ./make_package linux $(Build.SourceVersion)
      displayName: 'Package'

    # TODO: test the tarball

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'package-linux'
        targetPath: 'package/linux-$(Build.SourceVersion).tar.gz'

  - job: 'macos'
    pool:
      vmImage: 'macOS-10.14'
    steps:
    # Node.js tool installer
    # Finds or downloads and caches the specified version spec of Node.js and adds it to the PATH
    - task: NodeTool@0
      inputs:
        versionSpec: '>=12.0.0' 
        
    - bash: |
        brew update
        brew doctor
        for p in macvim tcl-tk llvm; do
          brew install $p
          brew outdated $p || brew upgrade $p
        done
      displayName: 'Install vim and deps'

    - bash: go get -u github.com/go-delve/delve/cmd/dlv
      displayName: 'Install Delve for Go'

    - task: CacheBeta@0
      inputs:
        key: v2 | gadgets | $(Agent.OS) | python3/vimspector/gadgets.py
        path: gadgets/macos/download
      displayName: Cache gadgets

    - bash: vim --version
      displayName: 'Print vim version information'

    - bash: ./run_tests --install --update --report messages --quiet
      displayName: 'Run the tests'
      env:
        VIMSPECTOR_MIMODE: lldb

    - bash: ./make_package macos $(Build.SourceVersion)
      displayName: 'Package'

    # TODO: test the tarball

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'package-macos'
        targetPath: 'package/macos-$(Build.SourceVersion).tar.gz'

- stage: "Publish"
  dependsOn:
  - "Build"
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: 'Publish'
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'package-linux'
        targetPath: $(Build.ArtifactStagingDirectory)
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'package-macos'
        targetPath: $(Build.ArtifactStagingDirectory)
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: puremourning
        repositoryName: '$(Build.Repository.Name)'
        action: 'create' # Options: create, edit, delete
        target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
        tagSource: 'manual' # Required when action == Create# Options: auto, manual
        tag: "$(Build.BuildId)"
        #title: # Optional
        #releaseNotesSource: 'file' # Optional. Options: file, input
        #releaseNotesFile: # Optional
        #releaseNotes: # Optional
        #assets: '$(Build.ArtifactStagingDirectory)/*' # Optional
        #assetUploadMode: 'delete' # Optional. Options: delete, replace
        #isDraft: false # Optional
        isPreRelease: true # Optional
        #addChangeLog: true # Optional
